import User from './user';
import VpPaths from './paths';
import ProfilesRepository from './profilesRepository';
import { commands } from 'vscode';
import { errorsLibrary, errorHandlers } from './errors';
import Link from './link';

export type OActions = {};

export default class Actions {
	constructor(
		public cfg: OActions,
		public user: User,
		private link: Link,
		public p: VpPaths,
		public pool: ProfilesRepository,
		public on: ReturnType<typeof errorHandlers>,
		public errors: ReturnType<typeof errorsLibrary>,
	) {}

	// COMMAND ACTIONS
	async createProfileCommand() {
		const newProfileName = await this.createNewProfileDirectory();
		return this.switchProfile(newProfileName);
	}

	async cloneProfileCommand() {
		const srcProfileName = await this.user.selectProfileName();
		const destProfileName = await this.createNewProfileDirectory();

		await this.symlinkifyExtensions(srcProfileName).then(
			undefined,
			this.on.error,
		);

		await this.copyProfileContents(srcProfileName, destProfileName).then(
			undefined,
			this.on.error,
		);
		//! üïÆ <cyberbiont> 3189b2cc-81ad-4e34-a8aa-565f8ce5ef28.md

		return this.switchProfile(destProfileName);
	}

	async switchProfileCommand() {
		const chosenProfileName = await this.user.selectProfileName();
		await this.link.checkMatchWithCurrentProfile(chosenProfileName);
		await this.switchProfile(chosenProfileName);
		return commands.executeCommand('workbench.action.reloadWindow');
	}

	async renameProfileCommand() {
		const oldName = await this.user.selectProfileName();
		const newName = await this.user.promptProfileName(oldName);

		// üïÆ <cyberbiont> a56eac98-df44-4194-94ab-a0e952ad8fc4.md
		await this.link
			.renameProfileFolder(oldName, newName)
			.then(undefined, this.on.error);

		// await this.link.switchLinkToProfile(newName).then(undefined, this.on.error);

		return this.pool.rescanProfiles();
	}

	async deleteProfileCommand() {
		const name = await this.user.selectProfileName();
		this.link.checkMatchWithCurrentProfile(name);

		await this.link.deleteProfileFolder(name);
		return this.pool.rescanProfiles();
		// üïÆ <cyberbiont> 33336010-437b-4ac1-b264-9cd671cba40a.md
	}

	cleanExtensionsHeapCommand() {
		// üïÆ <cyberbiont> 89f90333-ac82-490b-91bc-0b677bc643c3.md
	}

	public async rescan() {
		return this.pool.rescanProfiles();
	}

	// ACTIONS
	// üïÆ <cyberbiont> 4936ede9-783b-465a-b760-56d1a0d858d3.md

	async switchProfile(profileNameToActivate: string) {
		const currentProfileName = await this.link.getCurrentProfileName();
		await this.symlinkifyExtensions(currentProfileName);
		// üïÆ <cyberbiont> 7e1a1010-7d14-43a2-89af-cf7c41ebdcc2.md

		await this.link
			.switchLinkToProfile(profileNameToActivate)
			.then(undefined, this.on.error);

		return commands.executeCommand(`settings.cycle.${profileNameToActivate}`);
	}

	private async createNewProfileDirectory() {
		const name = await this.user.promptProfileName();
		await this.link.checkMatchWithCurrentProfile(name);
		await this.link.createProfileDirectory(name).then(undefined, this.on.error);
		await this.pool.rescanProfiles();
		return name;
	}
	// —Å–∏–º–ª–∏–Ω–∫ –Ω–∞ vscode-profile –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö!
	// –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ "–≥–ª–æ–±–∞–ª—å–Ω—ã—Ö" —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è / —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö?
	// —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —Ñ–∞–π–ª–µ obsolete (–ø–∞—Ä—Å–∏—Ç—å –µ–≥–æ, —Ç.–∫. —Ç–∞–º  JSON) –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π

	async copyProfileContents(
		srcProfileFolderName: string,
		destProfileFolderName: string,
	) {
		const subfoldersInfo = await this.link.getSubfoldersInfo(
			srcProfileFolderName,
		);
		return Promise.all(
			subfoldersInfo.map((subfolderInfo) =>
				this.link.copyProfileContent(
					subfolderInfo,
					srcProfileFolderName,
					destProfileFolderName,
				),
			),
		);
	}

	async symlinkifyExtensions(profileFolderName: string) {
		// üïÆ <cyberbiont> f7ea2dc2-10d1-4915-8cb2-4b6aa3c3fff0.md
		// üïÆ <cyberbiont> b2fcd0c9-db59-4981-ae8a-bbba8edbbedd.md
		const subfoldersInfo = await this.link.getSubfoldersInfo(profileFolderName);

		await Promise.all(
			subfoldersInfo.map((subfolderInfo) =>
				this.link.symlinkifyExtension(subfolderInfo, profileFolderName),
			),
		);
		return subfoldersInfo;
	}
}
// üïÆ <cyberbiont> ded39fb3-1135-4fba-a581-07b06b82306e.md

// TODO –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
// TODO –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–µ–Ω–∏ –ø—Ä–æ—Ñ–∞–π–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ –∏ –º–æ–∂–µ—Ç –¥–∞–∂–µ –º–µ–Ω—é—à–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∞–π–ª–∞
